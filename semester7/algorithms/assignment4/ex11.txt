//N0[i,2*l] = max(N0[i+1,2*l], -cost(i) + N1[i+1,2*l-1])
//N1[i,2*l+1] = max(N1[i+1,2*l+1], cost(i) + N0[i+1,2*l])
//
//
//n0[i,l] = N0[i,2*l]
//n1[i,l] = N1[i,2*l+1]
//
//=>
//
//
//x'[l] = max(x[l], y[l-1] - cost(i))
//y'[l] = max(y[l], x[l] + cost(i))
//

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;

int main() {

    size_t N, L;
    cin >> N >> L;

    vector<ll> x(L+1);
    vector<ll> y(L+1);
    vector<ll> cost(N);

    for (size_t i = 0; i != N; ++i)
        cin >> cost[i];



    for (size_t i = 0; i != N-1; ++i) {
        for (size_t l = L; l != 0; --l) {
            y[l] = max(y[l], x[l] + cost[i]);
            x[l] = max(x[l], y[l-1] - cost[i]);
        }

    }

    ll maximum = LONG_MIN;

    for (size_t l = 0; l != L+1; ++l)
        maximum = max(maximum, x[l]);
    
    cout << maximum;

}
